name: Deploy Docker Image
on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  MYSQL_SERVER_IP: ${{ secrets.MYSQL_SERVER_IP }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle and Build
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: '8.5'
          arguments: clean bootJar -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: taneem101/project:mail
          platforms: linux/amd64,linux/arm64
          build-args: |
            JAR_FILE=myapp.jar
          cache-from: type=gha # docker will attempt to pull previously cached layers from GitHub Actions cache to speed up the current build
          cache-to: type=gha,mode=max # docker will store the layers in GitHub Actions cache, which will be used by the next build

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "~/deploy/"
          timeout: 30s

      - name: Install Docker and docker-compose on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 300s
          script: |
            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Install docker-compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Verify installations
            docker --version
            docker-compose --version

      - name: SSH and deploy with docker-compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 300s
          envs: MYSQL_SERVER_IP,MYSQL_DATABASE,MYSQL_ROOT_PASSWORD,MAIL_USERNAME,MAIL_PASSWORD
          script: |
            cd ~/deploy
            # Set environment variables for docker-compose
            export MYSQL_SERVER_IP="${MYSQL_SERVER_IP}"
            export MYSQL_DATABASE="${MYSQL_DATABASE}"
            export MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}"
            export MAIL_USERNAME="${MAIL_USERNAME}"
            export MAIL_PASSWORD="${MAIL_PASSWORD}"

            # Pull the mail image
            docker pull taneem101/project:mail
            # Stop and remove existing containers
            docker-compose down || true
            # Start the application
            docker-compose up -d
            # Clean up unused images
            docker image prune -f

      - name: Health Check - Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 180s
          envs: MYSQL_SERVER_IP,MYSQL_DATABASE,MYSQL_ROOT_PASSWORD,MAIL_USERNAME,MAIL_PASSWORD
          script: |
            cd ~/deploy

            echo "Checking if containers are running..."
            docker-compose ps

            echo "Waiting for application to start..."
            sleep 10

            # Try health check with retries
            max_attempts=3
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts..."

              # Check if container is still running
              if ! docker-compose ps | grep -q "Up"; then
                echo "❌ Container is not running!"
                docker-compose logs --tail=20
                exit 1
              fi

              # Try to connect to the application
              response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ping 2>/dev/null || echo "000")

              if [ "$response" = "200" ]; then
                echo "✅ Deployment successful! Application is responding with HTTP 200"
                echo "Health check passed at $(date)"
                exit 0
              elif [ "$response" = "000" ]; then
                echo "Connection failed (attempt $attempt/$max_attempts) - application may still be starting..."
              else
                echo "Got HTTP $response (attempt $attempt/$max_attempts)"
              fi

              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 4 seconds before retry..."
                sleep 4
              fi

              attempt=$((attempt + 1))
            done

            echo "❌ Deployment failed! Health check failed after $max_attempts attempts"
            echo "Final container status:"
            docker-compose ps
            echo "Recent application logs:"
            docker-compose logs --tail=50
            exit 1
